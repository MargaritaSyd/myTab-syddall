{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { API_URL } from \"../../constants/dataBase\";\nexport var GET_STOCK = \"GET_STOCK\";\nexport var getStock = function getStock() {\n  return function _callee(dispatch) {\n    var response, result, stock;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            dispatch({\n              type: GET_STOCK,\n              status: 'loading'\n            });\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(API_URL + \"stock.json\"));\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            result = _context.sent;\n            console.log('raw', result);\n            stock = Object.keys(result).map(function (key) {\n              return _objectSpread(_objectSpread({}, result[key]), {}, {\n                id: key\n              });\n            });\n            console.log('array', stock);\n            dispatch({\n              type: GET_STOCK,\n              payload: stock,\n              status: 'success'\n            });\n            _context.next = 18;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0.message);\n            dispatch({\n              type: GET_STOCK,\n              status: 'error'\n            });\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 14]], Promise);\n  };\n};","map":{"version":3,"sources":["/Users/maggie/Documents/myTab/store/actions/stock.action.js"],"names":["API_URL","GET_STOCK","getStock","dispatch","type","status","fetch","response","json","result","console","log","stock","Object","keys","map","key","id","payload","message"],"mappings":";;;;;;;AAAA,SAASA,OAAT;AACA,OAAO,IAAMC,SAAS,GAAG,WAAlB;AAEP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAC1B,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGHA,YAAAA,QAAQ,CAAC;AACLC,cAAAA,IAAI,EAAEH,SADD;AAELI,cAAAA,MAAM,EAAE;AAFH,aAAD,CAAR;AAHG;AAAA,6CAQoBC,KAAK,CAAIN,OAAJ,gBARzB;;AAAA;AAQGO,YAAAA,QARH;AAAA;AAAA,6CAUkBA,QAAQ,CAACC,IAAT,EAVlB;;AAAA;AAUGC,YAAAA,MAVH;AAWHC,YAAAA,OAAO,CAACC,GAAR,CAAa,KAAb,EAAqBF,MAArB;AAEMG,YAAAA,KAbH,GAaWC,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBM,GAApB,CAAyB,UAAAC,GAAG;AAAA,qDACnCP,MAAM,CAACO,GAAD,CAD6B;AAEtCC,gBAAAA,EAAE,EAAED;AAFkC;AAAA,aAA5B,CAbX;AAkBHN,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAsBC,KAAtB;AAEAT,YAAAA,QAAQ,CAAC;AACLC,cAAAA,IAAI,EAAEH,SADD;AAELiB,cAAAA,OAAO,EAAEN,KAFJ;AAGLP,cAAAA,MAAM,EAAE;AAHH,aAAD,CAAR;AApBG;AAAA;;AAAA;AAAA;AAAA;AA2BCK,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAMQ,OAAlB;AACAhB,YAAAA,QAAQ,CAAC;AACLC,cAAAA,IAAI,EAAEH,SADD;AAELI,cAAAA,MAAM,EAAE;AAFH,aAAD,CAAR;;AA5BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAkCH,CAnCM","sourcesContent":["import { API_URL } from \"../../constants/dataBase\"\nexport const GET_STOCK = \"GET_STOCK\"\n\nexport const getStock = () => {\n    return async dispatch => {\n        try { \n        \n        dispatch({\n            type: GET_STOCK,\n            status: 'loading'\n        })\n            \n        const response = await fetch(`${API_URL}stock.json`)\n\n        const result = await response.json();\n        console.log ('raw' , result)\n\n        const stock = Object.keys(result).map( key => ({\n            ...result[key],\n            id: key,\n        }))\n\n        console.log('array' , stock)\n\n        dispatch({\n            type: GET_STOCK,\n            payload: stock,\n            status: 'success'\n        })\n\n        } catch(error) {\n            console.log(error.message)\n            dispatch({\n                type: GET_STOCK,\n                status: 'error'\n            })\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}